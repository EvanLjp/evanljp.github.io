<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>抽象工厂</title>
      <link href="/2019/04/17/designpattern-abstractfactory/"/>
      <url>/2019/04/17/designpattern-abstractfactory/</url>
      
        <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><ol><li>定义:抽象工厂提供一个创建一系列相关或者相互依赖对象的接口,无需指定被创建者具体类</li><li>类型:创建型 </li><li>适用场景<ul><li>客户端(应用层)不依赖产品实例如何被创建,实现等细节</li><li>强调一系列相关的产品对象(同一产品族) 一起使用创建对象需要大量重复代码</li><li>提供了一个产品类的库,所有产品以同样接口出现,从而使客户端不依赖与具体的实现</li></ul></li><li><p>优点</p><ul><li>具体的产品在应用层代码隔离,无需关系创建细节</li><li>将一系列产品族统一到一起进行创建</li></ul></li><li><p>缺点</p><ul><li>规定了所有可能被创建产品的集合,产品族扩展新的产品比较困难,需要修改抽象工厂的接口  </li><li>增加了系统的抽象性和理解难度</li></ul></li></ol><h2 id="DEMO"><a href="#DEMO" class="headerlink" title="DEMO"></a>DEMO</h2><pre><code class="java">// 创建者public abstract class VideoFactory {    public abstract Video getVideo();}// 具体创建者public class JavaVideoFactory extends VideoFactory {    @Override    public Video getVideo() {        return new JavaVideo();    }}public class PythonVideoFactory extends VideoFactory {    @Override    public Video getVideo() {        return new PythonVideo();    }}// 产品public abstract class Video {    public abstract void produce();}// 具体产品public  class JavaVideo extends Video {    @Override    public void produce() {        System.out.println(&quot;java 课程&quot;);    }}public  class PythonVideo extends Video {    @Override    public void produce() {        System.out.println(&quot;python 课程&quot;);    }}// 调用者public class Test {    public static void main(String[] args) {        VideoFactory videoFactory = new JavaVideoFactory();        Video video = videoFactory.getVideo();        video.produce();        videoFactory = new PythonVideoFactory();        video = videoFactory.getVideo();        video.produce();    }}</code></pre><h2 id="UML"><a href="#UML" class="headerlink" title="UML"></a>UML</h2><p>工厂方法为创建统一产品等级而存在,符合开闭原则,符合里氏替换原则<br><img src="http://evanljp-blog.oss-cn-beijing.aliyuncs.com/2019-03-23-factorymethod.png" alt=""></p><h2 id="源码例子"><a href="#源码例子" class="headerlink" title="源码例子"></a>源码例子</h2><ol><li><p>jdk<br><strong>collection Iterator<e> iterator()</e></strong><br><img src="https://evanljp-blog.oss-cn-beijing.aliyuncs.com/2019-03-23-Iterable.png" alt=""></p></li><li><p>URLStreamHandlerFactory<br><img src="https://evanljp-blog.oss-cn-beijing.aliyuncs.com/2019-03-23-URLStreamHandlerFactory.png" alt=""></p></li><li><p>ILoggerFactory</p></li></ol><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p>图解设计模式<br><a href="https://coding.imooc.com/class/270.html" target="_blank" rel="noopener">设计模式</a></p>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> design-pattern </tag>
            
            <tag> 创建型模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>工厂模式</title>
      <link href="/2019/04/17/designpattern-factory/"/>
      <url>/2019/04/17/designpattern-factory/</url>
      
        <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><ol><li>定义:定义一个创建对象的接口,但让实现这个接口的类来决定实例化哪个类,工厂方法让类的实例化推迟到子类中进行</li><li>类型:创建型 </li><li>适用场景<ul><li>创建对象需要大量重复代码</li><li>客户端(应用层)不依赖产品实例如何被创建,实现等细节</li><li>一个类通过其子类来指定创建哪个对象</li></ul></li><li>优点<ul><li>用户只需要关心所需产品对应的工厂,无需关心创建细节</li><li>加入新产品符合开闭原则,提高可扩展性</li></ul></li><li>缺点<ul><li>类的个数容易过多,增加复杂度</li><li>增加了系统的抽象性和理解难度</li></ul></li></ol><h2 id="DEMO"><a href="#DEMO" class="headerlink" title="DEMO"></a>DEMO</h2><pre><code class="java">// 创建者public abstract class VideoFactory {    public abstract Video getVideo();}// 具体创建者public class JavaVideoFactory extends VideoFactory {    @Override    public Video getVideo() {        return new JavaVideo();    }}public class PythonVideoFactory extends VideoFactory {    @Override    public Video getVideo() {        return new PythonVideo();    }}// 产品public abstract class Video {    public abstract void produce();}// 具体产品public  class JavaVideo extends Video {    @Override    public void produce() {        System.out.println(&quot;java 课程&quot;);    }}public  class PythonVideo extends Video {    @Override    public void produce() {        System.out.println(&quot;python 课程&quot;);    }}// 调用者public class Test {    public static void main(String[] args) {        VideoFactory videoFactory = new JavaVideoFactory();        Video video = videoFactory.getVideo();        video.produce();        videoFactory = new PythonVideoFactory();        video = videoFactory.getVideo();        video.produce();    }}</code></pre><h2 id="UML"><a href="#UML" class="headerlink" title="UML"></a>UML</h2><p>工厂方法为创建统一产品等级而存在,符合开闭原则,符合里氏替换原则<br><img src="http://evanljp-blog.oss-cn-beijing.aliyuncs.com/2019-03-23-factorymethod.png" alt=""></p><h2 id="源码例子"><a href="#源码例子" class="headerlink" title="源码例子"></a>源码例子</h2><ol><li><p>jdk<br><strong>collection Iterator<e> iterator()</e></strong><br><img src="https://evanljp-blog.oss-cn-beijing.aliyuncs.com/2019-03-23-Iterable.png" alt=""></p></li><li><p>URLStreamHandlerFactory<br><img src="https://evanljp-blog.oss-cn-beijing.aliyuncs.com/2019-03-23-URLStreamHandlerFactory.png" alt=""></p></li><li><p>ILoggerFactory</p></li></ol><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p>图解设计模式<br><a href="https://coding.imooc.com/class/270.html" target="_blank" rel="noopener">设计模式</a></p>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> design-pattern </tag>
            
            <tag> 创建型模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>简单工厂</title>
      <link href="/2019/04/17/designpattern-simplefactory/"/>
      <url>/2019/04/17/designpattern-simplefactory/</url>
      
        <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><ol><li>定义:由一个工厂对象决定创建出哪一种产品的实例</li><li>类型:创建型,不属于GOF23</li><li>适用场景<ul><li>工厂负责创建的对象比较少</li><li>客户端只知道传入工厂参数,对于如何创建对象逻辑不关心</li></ul></li><li>优点<ul><li>只需要传入一个正确的参数,就可以获取你需要的对象,而无需知道其创建细节</li></ul></li><li>缺点<ul><li>工厂类的指责相对过重,增加新的产品,需要修改工厂类的判断逻辑,违背开闭原则</li></ul></li></ol><h2 id="DEMO"><a href="#DEMO" class="headerlink" title="DEMO"></a>DEMO</h2><pre><code class="java">// 抽象public abstract class Video {    public abstract void produce();}// javapublic  class JavaVideo extends Video{    @Override    public void produce() {        System.out.println(&quot;java 课程&quot;);    }}// pythonpublic  class PythonVideo extends Video{    @Override    public void produce() {        System.out.println(&quot;python 课程&quot;);    }}</code></pre><pre><code class="java">// 抽象工厂public class VideoFactory {    public static Video getVideo(Class&lt;? extends Video&gt; clazz) {        try {            return clazz.newInstance();        } catch (InstantiationException e) {            e.printStackTrace();        } catch (IllegalAccessException e) {            e.printStackTrace();        }        return null;    }}// 调用public class Test {    public static void main(String[] args) {        Video java = VideoFactory.getVideo(JavaVideo.class);        java.produce();        Video python = VideoFactory.getVideo(PythonVideo.class);        python.produce();    }}</code></pre><h2 id="UML"><a href="#UML" class="headerlink" title="UML"></a>UML</h2><p>调用者调用VideoFactiory,而具体生产交个VideoFactory,按入参进行生成对象,不符合开闭原则,不符合单一职责原则<br><img src="https://evanljp-blog.oss-cn-beijing.aliyuncs.com/2019-03-21-simplefactory.png" alt=""></p><h2 id="源码例子"><a href="#源码例子" class="headerlink" title="源码例子"></a>源码例子</h2><ol><li>calendar</li></ol><pre><code class="java">private static Calendar createCalendar(TimeZone zone,                                           Locale aLocale)    {        CalendarProvider provider =            LocaleProviderAdapter.getAdapter(CalendarProvider.class, aLocale)                                 .getCalendarProvider();        if (provider != null) {            try {                return provider.getInstance(zone, aLocale);            } catch (IllegalArgumentException iae) {                // fall back to the default instantiation            }        }        Calendar cal = null;        if (aLocale.hasExtensions()) {            String caltype = aLocale.getUnicodeLocaleType(&quot;ca&quot;);            if (caltype != null) {                switch (caltype) {                case &quot;buddhist&quot;:                cal = new BuddhistCalendar(zone, aLocale);                    break;                case &quot;japanese&quot;:                    cal = new JapaneseImperialCalendar(zone, aLocale);                    break;                case &quot;gregory&quot;:                    cal = new GregorianCalendar(zone, aLocale);                    break;                }            }        }        if (cal == null) {            // If no known calendar type is explicitly specified,            // perform the traditional way to create a Calendar:            // create a BuddhistCalendar for th_TH locale,            // a JapaneseImperialCalendar for ja_JP_JP locale, or            // a GregorianCalendar for any other locales.            // NOTE: The language, country and variant strings are interned.            if (aLocale.getLanguage() == &quot;th&quot; &amp;&amp; aLocale.getCountry() == &quot;TH&quot;) {                cal = new BuddhistCalendar(zone, aLocale);            } else if (aLocale.getVariant() == &quot;JP&quot; &amp;&amp; aLocale.getLanguage() == &quot;ja&quot;                       &amp;&amp; aLocale.getCountry() == &quot;JP&quot;) {                cal = new JapaneseImperialCalendar(zone, aLocale);            } else {                cal = new GregorianCalendar(zone, aLocale);            }        }        return cal;    }</code></pre><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p>图解设计模式<br><a href="https://coding.imooc.com/class/270.html" target="_blank" rel="noopener">设计模式</a></p>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> design-pattern </tag>
            
            <tag> 创建型模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计原则</title>
      <link href="/2019/04/17/designpattern-principles/"/>
      <url>/2019/04/17/designpattern-principles/</url>
      
        <content type="html"><![CDATA[<h1 id="设计原则"><a href="#设计原则" class="headerlink" title="设计原则"></a>设计原则</h1><h2 id="开放封闭原则（Open-Closed-Principle-OCP"><a href="#开放封闭原则（Open-Closed-Principle-OCP" class="headerlink" title="开放封闭原则（Open Closed Principle - OCP)"></a>开放封闭原则（Open Closed Principle - OCP)</h2><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><ol><li>原文：Software entities like classes, modules and functions should be open for extension but closed for modifications.</li><li>译文：软件实体，如：类、模块与函数，对于扩展应该是开放的，但对于修改应该是封闭的。</li><li>理解：简言之，对扩展开放，对修改封闭。换句话说，可以去扩展类，但不要去修改类。</li><li>应用：当需求有改动，要修改代码了，此时您要做的是，尽量用继承或组合的方式来扩展类的功能，而不是直接修改类的代码。当然，如果能够确保对整体架构不会产生任何影响，那么也没必要搞得那么复杂了，直接改这个类吧。</li></ol><h3 id="demo"><a href="#demo" class="headerlink" title="demo"></a>demo</h3><h4 id="基本代码"><a href="#基本代码" class="headerlink" title="基本代码"></a>基本代码</h4><pre><code class="java">public interface ICourse {    Integer getId();    String getName();    Double getPrice();}public class JavaCourse implements ICourse {    private Integer id;    private String name;    private Double price;    public JavaCourse(Integer id, String name, Double price) {        this.id = id;        this.name = name;        this.price = price;    }    @Override    public Integer getId() {        return id;    }    @Override    public String getName() {        return name;    }    @Override    public Double getPrice() {        return price;    }}</code></pre><h4 id="refactor-加入打折课程"><a href="#refactor-加入打折课程" class="headerlink" title="refactor(加入打折课程)"></a>refactor(加入打折课程)</h4><pre><code class="java">public class JavaDiscountCourse extends JavaCourse {    public JavaDiscountCourse(Integer id, String name, Double price) {        super(id, name, price);    }    public Double getDisCountPrice() {        return super.getPrice() * 0.8;    }}</code></pre><h4 id="uml"><a href="#uml" class="headerlink" title="uml"></a>uml</h4><p>新的需求加入打折课程,并不修改原有的类,而是使用继承的方式进行扩展,这也就是开闭原则所说的对修改关闭,对扩展开放<br><img src="https://evanljp-blog.oss-cn-beijing.aliyuncs.com/2019-03-21-openclose-1.png" alt=""></p><h2 id="依赖倒置原则"><a href="#依赖倒置原则" class="headerlink" title="依赖倒置原则"></a>依赖倒置原则</h2><h3 id="介绍-1"><a href="#介绍-1" class="headerlink" title="介绍"></a>介绍</h3><ol><li>原文：High level modules should not depends upon low level modules. Both should depend upon abstractions. Abstractions should not depend upon details. Details should depend upon abstractions.</li><li>译文：高层模块不应该依 于抽象。抽象不应该依赖于细节，细节应该依赖于抽象。</li><li>理解：应该面向接口编程，不应该面向实现类编程。面向实现类编程，相当于就是论事，那是正向依赖（正常人思维）；面向接口编程，相当于通过事物表象来看本质，那是反向依赖，即依赖倒置（程序员思维）。</li><li>应用：并不是说，所有的类都要有一个对应的接口，而是说，如果有接口，那就尽量使用接口来编程吧。</li></ol><h3 id="demo-1"><a href="#demo-1" class="headerlink" title="demo"></a>demo</h3><h4 id="origin"><a href="#origin" class="headerlink" title="origin"></a>origin</h4><p><strong>学习课程</strong></p><pre><code class="java">public class Evan {    public void studyJavaCourse() {        System.out.println(&quot;evan study java&quot;);    }    public void studyFECourse() {        System.out.println(&quot;evan study FE&quot;);    }    public void studyPythonCourse() {        System.out.println(&quot;evan study python&quot;);    }}public class Test {    public static void main(String[] args) {        Evan evan = new Evan();        evan.studyFECourse();        evan.studyJavaCourse();        evan.studyPythonCourse();    }}</code></pre><p><strong>UML如下图,可以看到Test依赖于具体的实现,当Test加入新的需求,需要则Evan类的具体实现加入新的功能,也就意味着Evan类是不稳定的,是随时发生变化的</strong><br><img src="https://evanljp-blog.oss-cn-beijing.aliyuncs.com/2019-03-21-dependenceinversion.png" alt=""></p><h4 id="refactor"><a href="#refactor" class="headerlink" title="refactor"></a>refactor</h4><pre><code class="java">// 底层接口public interface ICourse {    void studyCourse();}// 底层接口实现public class FeCourse implements ICourse{    @Override    public void studyCourse() {        System.out.println(&quot;evan study FE&quot;);    }}public class JavaCourse implements ICourse{    @Override    public void studyCourse() {        System.out.println(&quot;evan study java&quot;);    }}// 中层使用者public class Evan {    private ICourse course;    public void setCourse(ICourse course) {        this.course = course;    }    public void studyCourse() {        course.studyCourse();    }}// 顶层调用者public class Test {    public static void main(String[] args) {        Evan evan = new Evan();        evan.setCourse(new JavaCourse());        evan.studyCourse();        evan.setCourse(new FeCourse());        evan.studyCourse();    }}</code></pre><p><strong>UML如下:现在将课程抽象成接口,位于最底层,中层用Evan类作为桥梁注入接口类作为一个属性,顶层调用者觉得具体接口实现,现在当新加入课程学习的需求时,除Test调用者以外,所有的类都不需要进行变化,只需要扩展接口的实现,这样的架构相比于之前的方案是稳定的,这也就是面向接口编程,OOP的多态特性优势的体现</strong><br><img src="https://evanljp-blog.oss-cn-beijing.aliyuncs.com/2019-03-21-dependenceinversion-1.png" alt=""></p><h2 id="单一指责原则"><a href="#单一指责原则" class="headerlink" title="单一指责原则"></a>单一指责原则</h2><h3 id="含义"><a href="#含义" class="headerlink" title="含义"></a>含义</h3><ol><li>原文：There should never be more than one reason for a class to change.</li><li>译文：永远不应该有多于一个原因来改变某个类。</li><li>理解：对于一个类而言，应该仅有一个引起它变化的原因。说白了就是，不同的类具备不同的职责，各施其责。这就好比一个团队，大家分工协作，互不影响，各做各的事情。</li><li>应用：当我们做系统设计时，如果发现有一个类拥有了两种的职责，那就问自己一个问题：可以将这个类分成两个类吗？如果真的有必要，那就分吧。千万不要让一个类干的事情太多！</li></ol><h3 id="demo-2"><a href="#demo-2" class="headerlink" title="demo"></a>demo</h3><p><strong>可以理解为Object单一指责,接口单一指责,方法单一指责,以下例子为违反单一指责</strong></p><pre><code class="java">private void doingsomething(boolean b) {        if (b) {            //todo something1        } else {            //todo something2        }    }</code></pre><h2 id="接口隔离原则"><a href="#接口隔离原则" class="headerlink" title="接口隔离原则"></a>接口隔离原则</h2><h3 id="含义-1"><a href="#含义-1" class="headerlink" title="含义"></a>含义</h3><ol><li>原文：The dependency of one class to another one should depend on the smallest possible interface.</li><li>译文：一个类与另一个类之间的依赖性，应该依赖于尽可能小的接口。</li><li>理解：不要对外暴露没有实际意义的接口。也就是说，接口是给别人调用的，那就不要去为难别人了，尽可能保证接口的实用性吧。她好，我也好。</li><li>应用：当需要对外暴露接口时，需要再三斟酌，如果真的没有必要对外提供的，就删了吧。一旦您提供了，就意味着，您将来要多做一件事情，何苦要给自己找事做呢。</li></ol><h3 id="demo-3"><a href="#demo-3" class="headerlink" title="demo"></a>demo</h3><h4 id="origin-1"><a href="#origin-1" class="headerlink" title="origin"></a>origin</h4><p><strong>原始animal接口的实现,如果有Dog类实现此接口,必须实现fly方法,说明是不合理的,需要进行重构</strong></p><pre><code class="java">public interface IAnimalAction {    void eat();    void fly();    void swim();}</code></pre><h4 id="refactor-1"><a href="#refactor-1" class="headerlink" title="refactor"></a>refactor</h4><p><strong>接口隔离</strong></p><pre><code class="java">// 接口public interface IEatAnimalAction {    void eat();}public interface IFlyAnimalAction {    void fly();}public interface ISwimAnimalAction {    void swim();}// 实现public class Bird implements IEatAnimalAction,IFlyAnimalAction{    @Override    public void eat() {    }    @Override    public void fly() {    }}public class Dog implements IEatAnimalAction,ISwimAnimalAction{    @Override    public void eat() {    }    @Override    public void swim() {    }}</code></pre><p><strong>UML</strong><br><img src="https://evanljp-blog.oss-cn-beijing.aliyuncs.com/2019-03-21-Interfacesegregation.png" alt=""></p><h2 id="迪米特原则-最小知道原则"><a href="#迪米特原则-最小知道原则" class="headerlink" title="迪米特原则(最小知道原则)"></a>迪米特原则(最小知道原则)</h2><h3 id="含义-2"><a href="#含义-2" class="headerlink" title="含义"></a>含义</h3><ol><li>原文：Only talk to you immediate friends.</li><li>译文：只与你最直接的朋友交流。</li><li>理解：尽量减少对象之间的交互，从而减小类之间的耦合。简言之，一定要做到：低耦合，高内聚。</li><li>应用：在做系统设计时，不要让一个类依赖于太多的其他类，需尽量减小依赖关系，否则，您死都不知道自己怎么死的。</li></ol><h3 id="demo-4"><a href="#demo-4" class="headerlink" title="demo"></a>demo</h3><p><strong>方法的入参为朋友,方法内引用为非朋友,尽量只与朋友交流</strong>  </p><pre><code class="java">public class Boss {    public void commandCheckNumber(TeamLeader teamLeader) {        teamLeader.checkNumberOfCourse();    }}public class TeamLeader {    public void checkNumberOfCourse(){        List&lt;Course&gt; courseList = new ArrayList&lt;&gt;();        for (int i = 0; i &lt; 20; i++) {            courseList.add(new Course());        }        System.out.println(&quot;course size&quot;+courseList.size());    }}public class Course {}</code></pre><p><strong>UML:Boss仅仅与teamleader交流,不与Course交流</strong><br><img src="https://evanljp-blog.oss-cn-beijing.aliyuncs.com/2019-03-21-demeter.png" alt=""></p><h2 id="里氏替换原则"><a href="#里氏替换原则" class="headerlink" title="里氏替换原则"></a>里氏替换原则</h2><ol><li>原文：Functions that use pointers or references to base classes must be able to use objects of derived classes without knowing it.</li><li>译文：使用基类的指针或引用的函数，必须是在不知情的情况下，能够使用派生类的对象。</li><li>理解：父类能够替换子类，但子类不一定能替换父类。也就是说，在代码中可以将父类全部替换为子类，程序不会报错，也不会在运行时出现任何异常，但反过来却不一定成立。</li><li>应用：在继承类时，务必重写（Override）父类中所有的方法，尤其需要注意父类的 protected 方法（它们往往是让您重写的），子类尽量不要暴露自己的 public 方法供外界调用。往往不覆盖父类提供的方法,仅仅增加方法.</li><li>含义:<ul><li>子类可以实现父类的抽象方法,但是不能覆盖父类的非抽象方法.</li><li>子类可以增加自己的特有方法.</li><li>当子类的方法重载父类的方法时,方法的前置条件(即方法的输入以及入参)要比父类的输入参数更加宽松.</li><li>当子类的方法实现父类的方法时(重写,重载,实现抽象方法时),方法的后置条件(输出以及返回值)要比父类更加严格或者相等.</li></ul></li></ol><h2 id="合成聚合复用原则"><a href="#合成聚合复用原则" class="headerlink" title="合成聚合复用原则"></a>合成聚合复用原则</h2><ol><li>定义:尽量使用对象组合/聚合,而不是继承关系实现软件复用的关系,聚合:has a,组合:contains a</li><li>优点:可以使系统更加灵活,降低类之间的耦合度,一个类的变化对其他类的影响程度比较小</li></ol><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p>图解设计模式<br><a href="https://coding.imooc.com/class/270.html" target="_blank" rel="noopener">设计模式</a></p>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> design-pattern </tag>
            
            <tag> 设计原则 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VIMTUTOR</title>
      <link href="/2019/04/17/vim-basic/"/>
      <url>/2019/04/17/vim-basic/</url>
      
        <content type="html"><![CDATA[<p><strong>欢     迎     阅     读   《 V I M  教  程 》   ――      版本 1.7</strong></p><pre><code> Vim 是一个具有很多命令的功能非常强大的编辑器。限于篇幅，在本教程当中 就不详细介绍了。本教程的设计目标是讲述一些必要的基本命令，而掌握好这 些命令，您就能够很容易地将 Vim 当作一个通用编辑器来使用了。 完成本教程的内容大约需要25-30分钟，取决于您训练的时间。 注意： 每一节的命令操作将会更改本文。推荐您复制本文的一个副本，然后在副本上 进行训练(如果您是通过&quot;vimtutor&quot;来启动教程的，那么本文就已经是副本了)。 切记一点：本教程的设计思路是在使用中进行学习的。也就是说，您需要通过 执行命令来学习它们本身的正确用法。如果您只是阅读而不操作，那么您可能 会很快遗忘这些命令的！ 好了，现在请确定您的Shift-Lock(大小写锁定键)还没有按下，然后按键盘上 的字母键 j 足够多次来移动光标，直到第一节的内容能够完全充满屏幕。</code></pre><h1 id="第一讲"><a href="#第一讲" class="headerlink" title="第一讲"></a>第一讲</h1><h2 id="第一节：移动光标"><a href="#第一节：移动光标" class="headerlink" title="第一节：移动光标"></a>第一节：移动光标</h2><pre><code>         ** 要移动光标，请依照说明分别按下 h、j、k、l 键。 **         ^         k            提示： h 的键位于左边，每次按下就会向左移动。   &lt; h         l &gt;           l 的键位于右边，每次按下就会向右移动。         j                       j 键看起来很象一支尖端方向朝下的箭头。         v  1. 请随意在屏幕内移动光标，直至您觉得舒服为止。  2. 按下下行键(j)，直到出现光标重复下行。---&gt; 现在您应该已经学会如何移动到下一讲吧。  3. 现在请使用下行键，将光标移动到第一讲第二节。提示：如果您不敢确定您所按下的字母，请按下&lt;ESC&gt;键回到正常(Normal)模式。      然后再次从键盘输入您想要的命令。提示：光标键应当也能正常工作的。但是使用hjkl键，在习惯之后您就能够更快      地在屏幕内四处移动光标。真的是这样！</code></pre><h2 id="第二节：VIM的进入和退出"><a href="#第二节：VIM的进入和退出" class="headerlink" title="第二节：VIM的进入和退出"></a>第二节：VIM的进入和退出</h2><pre><code>  !! 特别提示：敬请阅读本一节的完整内容，然后再执行以下所讲解的命令。  1. 按&lt;ESC&gt;键(这是为了确保您处在正常模式)。  2. 然后输入：            :q! &lt;回车&gt;     这种方式的退出编辑器会丢弃您进入编辑器以来所做的改动。  3. 如果您看到了命令行提示符，请输入能够带您回到本教程的命令，那就是：     vimtutor &lt;回车&gt;  4. 如果您自信已经牢牢记住了这些步骤的话，请从步骤1执行到步骤3退出，然     后再次进入编辑器。提示： :q! &lt;回车&gt; 会丢弃您所做的任何改动。几讲之后您将学会如何保存改动到文件。  5. 将光标下移到第一讲第三节。</code></pre><h2 id="第三节：文本编辑之删除"><a href="#第三节：文本编辑之删除" class="headerlink" title="第三节：文本编辑之删除"></a>第三节：文本编辑之删除</h2><pre><code>   ** 在正常(Normal)模式下，可以按下 x 键来删除光标所在位置的字符。**  1. 请将光标移动到本节中下面标记有 ---&gt; 的那一行。  2. 为了修正输入错误，请将光标移至准备删除的字符的位置处。  3. 然后按下 x 键将错误字符删除掉。  4. 重复步骤2到步骤4，直到句子修正为止。---&gt; The ccow jumpedd ovverr thhe mooon.  5. 好了，该行已经修正了，下面是第一讲第四节。特别提示：在浏览本教程时，不要强行记忆。记住一点：在使用中学习。</code></pre><h2 id="第四节：文本编辑之插入"><a href="#第四节：文本编辑之插入" class="headerlink" title="第四节：文本编辑之插入"></a>第四节：文本编辑之插入</h2><pre><code>     ** 在正常模式下，可以按下 i 键来插入文本。**  1. 请将光标移动到本节中下面标记有 ---&gt; 的第一行。  2. 为了使得第一行内容雷同于第二行，请将光标移至文本第一个准备插入字符     的位置。  3. 然后按下 i 键，接着输入必要的文本字符。  4. 每个错误修正完毕后，请按下 &lt;ESC&gt; 键返回正常模式。     重复步骤2至步骤4以便修正句子。---&gt; There is text misng this .---&gt; There is some text missing from this line.  5. 如果您对文本插入操作已经很满意，请接着阅读下面的第一讲第五节。</code></pre><h2 id="第五节：文本编辑之添加"><a href="#第五节：文本编辑之添加" class="headerlink" title="第五节：文本编辑之添加"></a>第五节：文本编辑之添加</h2><pre><code>            ** 按 A 键以添加文本。 **  1. 移动光标到下面第一个标记有 ---&gt; 的一行。     光标放在那一行的哪个字符上并不重要。  2. 按 A 键输入必要的添加内容。  3. 文本添加完毕后，按 &lt;ESC&gt; 键回到正常模式。  4. 移动光标到下面第二个标记有 ---&gt; 的一行。重复步骤2和步骤3以改正这个句子。---&gt; There is some text missing from th     There is some text missing from this line.---&gt; There is also some text miss     There is also some text missing here.  5. 当您对添加文本操作感到满意时，请继续学习第一讲第六节。</code></pre><h2 id="第六节：编辑文件"><a href="#第六节：编辑文件" class="headerlink" title="第六节：编辑文件"></a>第六节：编辑文件</h2><pre><code>            ** 使用 :wq 以保存文件并退出。 **  特别提示：在执行以下步骤之前，请先读完整个小节！  1. 如您在第一讲第二节中所做的那样退出本教程： :q!     或者，如果您可以访问另一个终端，请在那里执行以下操作。  2. 在 shell 的提示符下输入命令： vim tutor &lt;回车&gt;     &#39;vim&#39;是启动 Vim 编辑器的命令，&#39;tutor&#39;是您希望编辑的文件的名字。     请使用一个可以改动的文件。  3. 使用您在前面的教程中学到的命令插入删除文本。  4. 保存改动过的文件并退出 Vim，按这些键： :wq  &lt;回车&gt;  5. 如果您在步骤1中已经退出 vimtutor，请重启 vimtutor 移动到下面的小结一节。  6. 阅读完以上步骤，弄懂它们的意义，然后在实践中进行练习。</code></pre><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><pre><code>  1. 光标在屏幕文本中的移动既可以用箭头键，也可以使用 hjkl 字母键。     h (左移)    j (下行)       k (上行)        l (右移)  2. 欲进入 Vim 编辑器(从命令行提示符)，请输入：vim 文件名 &lt;回车&gt;  3. 欲退出 Vim 编辑器，请输入 &lt;ESC&gt;   :q!   &lt;回车&gt; 放弃所有改动。                      或者输入 &lt;ESC&gt;   :wq   &lt;回车&gt; 保存改动。  4. 在正常模式下删除光标所在位置的字符，请按： x  5. 欲插入或添加文本，请输入：     i   输入欲插入文本   &lt;ESC&gt;        在光标前插入文本     A   输入欲添加文本   &lt;ESC&gt;             在一行后添加文本特别提示：按下 &lt;ESC&gt; 键会带您回到正常模式或者撤消一个不想输入或部分完整的命令。好了，第一讲到此结束。下面接下来继续第二讲的内容。</code></pre><h1 id="第二讲"><a href="#第二讲" class="headerlink" title="第二讲"></a>第二讲</h1><h2 id="第一节：删除类命令"><a href="#第一节：删除类命令" class="headerlink" title="第一节：删除类命令"></a>第一节：删除类命令</h2><pre><code>        ** 输入 dw 可以从光标处删除至一个单词的末尾。**  1. 请按下 &lt;ESC&gt; 键确保您处于正常模式。  2. 请将光标移动到本节中下面标记有 ---&gt; 的那一行。  3. 请将光标移至准备要删除的单词的起始处。  4. 接着输入 dw 删除掉该单词。  特别提示：当您输入时，字母 d 会同时出现在屏幕的最后一行。Vim 在等待您输入  字母 w。如果您看到的是除 d 外的其他字符，那表明您按错了；请按下 &lt;ESC&gt; 键，  然后重新再来。---&gt; There are a some words fun that don&#39;t belong paper in this sentence.  5. 重复步骤3和步骤4，直至句子修正完毕。接着继续第二讲第二节内容。</code></pre><h2 id="第二节：更多删除类命令"><a href="#第二节：更多删除类命令" class="headerlink" title="第二节：更多删除类命令"></a>第二节：更多删除类命令</h2><pre><code>           ** 输入 d$ 从当前光标删除到行末。**  1. 请按下 &lt;ESC&gt; 键确保您处于正常模式。  2. 请将光标移动到本节中下面标记有 ---&gt; 的那一行。  3. 请将光标移动到该行的尾部(也就是在第一个点号‘.’后面)。  4. 然后输入 d$ 从光标处删至当前行尾部。---&gt; Somebody typed the end of this line twice. end of this line twice.  5. 请继续学习第二讲第三节就知道是怎么回事了。</code></pre><h2 id="第三节：关于命令和对象"><a href="#第三节：关于命令和对象" class="headerlink" title="第三节：关于命令和对象"></a>第三节：关于命令和对象</h2><pre><code>  许多改变文本的命令都由一个操作符和一个动作构成。  使用删除操作符 d 的删除命令的格式如下：    d   motion  其中：    d      - 删除操作符。    motion - 操作符的操作对象(在下面列出)。  一个简短的动作列表：    w - 从当前光标当前位置直到下一个单词起始处，不包括它的第一个字符。    e - 从当前光标当前位置直到单词末尾，包括最后一个字符。    $ - 从当前光标当前位置直到当前行末。  因此输入 de 会从当前光标位置删除到单词末尾。特别提示：    对于勇于探索者，请在正常模式下面仅按代表相应动作的键而不使用操作符，您    将看到光标的移动正如上面的对象列表所代表的一样。</code></pre><h2 id="第四节：使用计数指定动作"><a href="#第四节：使用计数指定动作" class="headerlink" title="第四节：使用计数指定动作"></a>第四节：使用计数指定动作</h2><pre><code>             ** 在动作前输入数字会使它重复那么多次。 **  1. 移动光标到下面标记有 ---&gt; 的一行的开始。  2. 输入 2w 使光标向前移动两个单词。  3. 输入 3e 使光标向前移动到第三个单词的末尾。  4. 输入 0 (数字零) 移动光标到行首。  5. 重复步骤2和步骤3，尝试不同的数字。---&gt; This is just a line with words you can move around in.  6. 请继续学习第二讲第五节。</code></pre><h2 id="第五节：使用计数以删除更多"><a href="#第五节：使用计数以删除更多" class="headerlink" title="第五节：使用计数以删除更多"></a>第五节：使用计数以删除更多</h2><pre><code>           ** 使用操作符时输入数字可以使它重复那么多次。 **  上面已经提到过删除操作符和动作的组合，您可以在组合中动作之前插入一个数字以  删除更多：     d   number(数字)   motion  1. 移动光标到下面标记有 ---&gt; 的一行中第一个大写字母单词上。  2. 输入 d2w 以删除两个大写字母单词。  3. 重复步骤1和步骤2，使用不同的数字使得用一个命令就能删除全部相邻的大写字母     单词---&gt;  this ABC DE line FGHI JK LMN OP of words is Q RS TUV cleaned up.</code></pre><h2 id="第六节：操作整行"><a href="#第六节：操作整行" class="headerlink" title="第六节：操作整行"></a>第六节：操作整行</h2><pre><code>             ** 输入 dd 可以删除整一个当前行。 **  鉴于整行删除的高频度，Vi 的设计者决定要简化整行删除操作，您仅需要在同一行上  击打两次 d 就可以删除掉光标所在的整行了。  1. 请将光标移动到本节中下面的短句段落中的第二行。  2. 输入 dd 删除该行。  3. 然后移动到第四行。  4. 接着输入 2dd 删除两行。---&gt;  1)  Roses are red,---&gt;  2)  Mud is fun,---&gt;  3)  Violets are blue,---&gt;  4)  I have a car,---&gt;  5)  Clocks tell time,---&gt;  6)  Sugar is sweet---&gt;  7)  And so are you.</code></pre><h2 id="第七节：撤消类命令"><a href="#第七节：撤消类命令" class="headerlink" title="第七节：撤消类命令"></a>第七节：撤消类命令</h2><pre><code>    ** 输入 u 来撤消最后执行的命令，输入 U 来撤消对整行的修改。 **  1. 请将光标移动到本节中下面标记有 ---&gt; 的那一行，并将其置于第一个错误     处。  2. 输入 x 删除第一个不想保留的字母。  3. 然后输入 u 撤消最后执行的(一次)命令。  4. 这次要使用 x 修正本行的所有错误。  5. 现在输入一个大写的 U ，恢复到该行的原始状态。  6. 接着多次输入 u 以撤消 U 以及更前的命令。  7. 然后多次输入 CTRL-R (先按下 CTRL 键不放开，接着按 R 键)，这样就     可以重做被撤消的命令，也就是撤消掉撤消命令。---&gt; Fiix the errors oon thhis line and reeplace them witth undo.  8. 这些都是非常有用的命令。下面是第二讲的小结了。</code></pre><h2 id="小结-1"><a href="#小结-1" class="headerlink" title="小结"></a>小结</h2><pre><code>  1. 欲从当前光标删除至下一个单词，请输入：dw  2. 欲从当前光标删除至当前行末尾，请输入：d$  3. 欲删除整行，请输入：dd  4. 欲重复一个动作，请在它前面加上一个数字：2w  5. 在正常模式下修改命令的格式是：               operator   [number]   motion     其中：       operator - 操作符，代表要做的事情，比如 d 代表删除       [number] - 可以附加的数字，代表动作重复的次数       motion   - 动作，代表在所操作的文本上的移动，例如 w 代表单词(word)，          $ 代表行末等等。  6. 欲移动光标到行首，请按数字0键：0  7. 欲撤消以前的操作，请输入：u (小写的u)     欲撤消在一行中所做的改动，请输入：U (大写的U)     欲撤消以前的撤消命令，恢复以前的操作结果，请输入：CTRL-R</code></pre><h1 id="第三讲"><a href="#第三讲" class="headerlink" title="第三讲"></a>第三讲</h1><h2 id="第一节：置入类命令"><a href="#第一节：置入类命令" class="headerlink" title="第一节：置入类命令"></a>第一节：置入类命令</h2><pre><code>        ** 输入 p 将最后一次删除的内容置入光标之后。 **  1. 请将光标移动到本节中下面第一个标记有 ---&gt; 的一行。  2. 输入 dd 将该行删除，这样会将该行保存到 Vim 的一个寄存器中。  3. 接着将光标移动到 c) 一行，即准备置入的位置的上方。记住：是上方哦。  4. 然后在正常模式下(&lt;ESC&gt;键进入)输入 p 将该行粘贴置入。  5. 重复步骤2至步骤4，将所有的行依序放置到正确的位置上。---&gt; d) Can you learn too?---&gt; b) Violets are blue,---&gt; c) Intelligence is learned,---&gt; a) Roses are red,</code></pre><h2 id="第二节：替换类命令"><a href="#第二节：替换类命令" class="headerlink" title="第二节：替换类命令"></a>第二节：替换类命令</h2><pre><code>      ** 输入 r 和一个字符替换光标所在位置的字符。**  1. 请将光标移动到本节中下面标记有 ---&gt; 的第一行。  2. 请移动光标到第一个出错的位置。  3. 接着输入 r 和要替换成的字符，这样就能将错误替换掉了。  4. 重复步骤2和步骤3，直到第一行已经修改完毕。---&gt;  Whan this lime was tuoed in, someone presswd some wrojg keys!---&gt;  When this line was typed in, someone pressed some wrong keys!  5. 然后我们继续学习第三讲第三节。特别提示：切记您要在使用中学习，而不是在记忆中学习。</code></pre><h2 id="第三节：更改类命令"><a href="#第三节：更改类命令" class="headerlink" title="第三节：更改类命令"></a>第三节：更改类命令</h2><pre><code>         ** 要改变文本直到一个单词的末尾，请输入 ce **  1. 请将光标移动到本节中下面标记有 ---&gt; 的第一行。  2. 接着把光标放在单词 lubw 的字母 u 的位置那里。  3. 然后输入 cw 以及正确的单词(在本例中是输入 ine )。  4. 最后按 &lt;ESC&gt; 键，然后光标定位到下一个错误第一个准备更改的字母处。  5. 重复步骤3和步骤4，直到第一个句子完全雷同第二个句子。---&gt; This lubw has a few wptfd that mrrf changing usf the change operator.---&gt; This line has a few words that need changing using the change operator.提示：请注意 ce 命令不仅仅是删除了一个单词，它也让您进入插入模式了。</code></pre><h2 id="第四节：使用c更改更多"><a href="#第四节：使用c更改更多" class="headerlink" title="第四节：使用c更改更多"></a>第四节：使用c更改更多</h2><pre><code>       ** 更改类操作符可以与删除中使用的同样的动作配合使用。 **  1. 更改类操作符的工作方式跟删除类是一致的。操作格式是：         c    [number]   motion  2. 动作参数(motion)也是一样的，比如 w 代表单词，$代表行末等等。  3. 请将光标移动到本节中下面标记有 ---&gt; 的第一行。  4. 接着将光标移动到第一个错误处。  5. 然后输入 c$ 使得该行剩下的部分更正得同第二行一样。最后按 &lt;ESC&gt; 键。---&gt; The end of this line needs some help to make it like the second.---&gt; The end of this line needs to be corrected using the  c$  command.</code></pre><h2 id="小结-2"><a href="#小结-2" class="headerlink" title="小结"></a>小结</h2><pre><code>  1. 要重新置入已经删除的文本内容，请按小写字母 p 键。该操作可以将已删除     的文本内容置于光标之后。如果最后一次删除的是一个整行，那么该行将置     于当前光标所在行的下一行。  2. 要替换光标所在位置的字符，请输入小写的 r 和要替换掉原位置字符的新字     符即可。  3. 更改类命令允许您改变从当前光标所在位置直到动作指示的位置中间的文本。     比如输入 ce 可以替换当前光标到单词的末尾的内容；输入 c$ 可以替换当     前光标到行末的内容。  4. 更改类命令的格式是：     c   [number]   motion现在我们继续学习下一讲。</code></pre><h1 id="第四讲"><a href="#第四讲" class="headerlink" title="第四讲"></a>第四讲</h1><h2 id="第一节：定位及文件状态"><a href="#第一节：定位及文件状态" class="headerlink" title="第一节：定位及文件状态"></a>第一节：定位及文件状态</h2><pre><code>  ** 输入 CTRL-G 显示当前编辑文件中当前光标所在行位置以及文件状态信息。     输入大写 G 则直接跳转到文件中的某一指定行。**  提示：切记要先通读本节内容，之后才可以执行以下步骤!!!  1. 按下 CTRL 键不放开然后按 g 键。我们称这个键组合为 CTRL-G。     您会看到页面最底部出现一个状态信息行，显示的内容是当前编辑的文件名     和文件中光标位置。请记住行号，它会在步骤3中用到。提示：您也许会在屏幕的右下角看到光标位置，这会在 &#39;ruler&#39; 选项设置时发生      (参见 :help &#39;ruler&#39;)  2. 输入大写 G 可以使得当前光标直接跳转到文件最后一行。     输入 gg 可以使得当前光标直接跳转到文件第一行。  3. 输入您曾停留的行号，然后输入大写 G。这样就可以返回到您第一次按下     CTRL-G 时所在的行了。  4. 如果您觉得没问题的话，请执行步骤1至步骤3的操作进行练习。</code></pre><h2 id="第二节：搜索类命令"><a href="#第二节：搜索类命令" class="headerlink" title="第二节：搜索类命令"></a>第二节：搜索类命令</h2><pre><code>     ** 输入 / 加上一个字符串可以用以在当前文件中查找该字符串。**  1. 在正常模式下输入 / 字符。您此时会注意到该字符和光标都会出现在屏幕底     部，这跟 : 命令是一样的。  2. 接着输入 errroor &lt;回车&gt;。那个errroor就是您要查找的字符串。  3. 要查找同上一次的字符串，只需要按 n 键。要向相反方向查找同上一次的字     符串，请输入大写 N 即可。  4. 如果您想逆向查找字符串，请使用 ? 代替 / 进行。  5. 要回到您之前的位置按 CTRL-O (按住 Ctrl 键不放同时按下字母 o)。重复按可以     回退更多步。CTRL-I 会跳转到较新的位置。---&gt;  &quot;errroor&quot; is not the way to spell error;  errroor is an error.提示：如果查找已经到达文件末尾，查找会自动从文件头部继续查找，除非      &#39;wrapscan&#39; 选项被复位。</code></pre><h2 id="第三节：配对括号的查找"><a href="#第三节：配对括号的查找" class="headerlink" title="第三节：配对括号的查找"></a>第三节：配对括号的查找</h2><pre><code>          ** 输入 % 可以查找配对的括号 )、]、}。**  1. 把光标放在本节下面标记有 --&gt; 那一行中的任何一个 (、[ 或 { 处。  2. 接着按 % 字符。  3. 此时光标的位置应当是在配对的括号处。  4. 再次按 % 就可以跳回配对的第一个括号处。  5. 移动光标到另一个 (、)、[、]、{ 或 } 处，按 % 查看其所作所为。---&gt; This ( is a test line with (&#39;s, [&#39;s ] and {&#39;s } in it. ))提示：在程序调试时，这个功能用来查找不配对的括号是很有用的。</code></pre><h2 id="第四节：替换命令"><a href="#第四节：替换命令" class="headerlink" title="第四节：替换命令"></a>第四节：替换命令</h2><pre><code>        ** 输入 :s/old/new/g 可以替换 old 为 new。**  1. 请将光标移动到本节中下面标记有 ---&gt; 的那一行。  2. 输入 :s/thee/the &lt;回车&gt; 。请注意该命令只改变光标所在行的第一个匹配     串。  3. 输入 :s/thee/the/g    则是替换全行的匹配串，该行中所有的 &quot;thee&quot; 都会被     改变。---&gt; thee best time to see thee flowers is in thee spring.  4. 要替换两行之间出现的每个匹配串，请     输入   :#,#s/old/new/g   其中 #,# 代表的是替换操作的若干行中                              首尾两行的行号。     输入   :%s/old/new/g     则是替换整个文件中的每个匹配串。     输入   :%s/old/new/gc    会找到整个文件中的每个匹配串，并且对每个匹配串                              提示是否进行替换。</code></pre><h2 id="小结-3"><a href="#小结-3" class="headerlink" title="小结"></a>小结</h2><pre><code>  1. CTRL-G 用于显示当前光标所在位置和文件状态信息。     G 用于将光标跳转至文件最后一行。     先敲入一个行号然后输入大写 G 则是将光标移动至该行号代表的行。     gg 用于将光标跳转至文件第一行。  2. 输入 / 然后紧随一个字符串是在当前所编辑的文档中正向查找该字符串。     输入 ? 然后紧随一个字符串则是在当前所编辑的文档中反向查找该字符串。     完成一次查找之后按 n 键是重复上一次的命令，可在同一方向上查     找下一个匹配字符串所在；或者按大写 N 向相反方向查找下一匹配字符串所在。     CTRL-O 带您跳转回较旧的位置，CTRL-I 则带您到较新的位置。  3. 如果光标当前位置是括号(、)、[、]、{、}，按 % 会将光标移动到配对的括号上。  4. 在一行内替换头一个字符串 old 为新的字符串 new，请输入  :s/old/new     在一行内替换所有的字符串 old 为新的字符串 new，请输入  :s/old/new/g     在两行内替换所有的字符串 old 为新的字符串 new，请输入  :#,#s/old/new/g     在文件内替换所有的字符串 old 为新的字符串 new，请输入  :%s/old/new/g     进行全文替换时询问用户确认每个替换需添加 c 标志        :%s/old/new/gc</code></pre><h1 id="第五讲"><a href="#第五讲" class="headerlink" title="第五讲"></a>第五讲</h1><h2 id="第一节：在-VIM-内执行外部命令的方法"><a href="#第一节：在-VIM-内执行外部命令的方法" class="headerlink" title="第一节：在 VIM 内执行外部命令的方法"></a>第一节：在 VIM 内执行外部命令的方法</h2><pre><code>       ** 输入 :! 然后紧接着输入一个外部命令可以执行该外部命令。**  1. 按下我们所熟悉的 : 命令使光标移动到屏幕底部。这样您就可以输入一行命令了。  2. 接着输入感叹号 ! 这个字符，这样就允许您执行外部的 shell 命令了。  3. 我们以 ls 命令为例。输入 !ls &lt;回车&gt; 。该命令就会列举出您当前目录的     内容，就如同您在命令行提示符下输入 ls 命令的结果一样。如果 !ls 没起     作用，您可以试试 :!dir 看看。提示：所有的外部命令都可以以这种方式执行，包括带命令行参数的那些。提示：所有的 : 命令都必须以敲 &lt;回车&gt; 键结束。从今以后我们就不会总是提到这一点      了。</code></pre><h2 id="第二节：关于保存文件的更多信息"><a href="#第二节：关于保存文件的更多信息" class="headerlink" title="第二节：关于保存文件的更多信息"></a>第二节：关于保存文件的更多信息</h2><pre><code>         ** 要将对文件的改动保存到文件中，请输入 :w FILENAME 。**  1. 输入 :!dir 或者 :!ls 获知当前目录的内容。您应当已知道最后还得敲     &lt;回车&gt; 吧。  2. 选择一个未被用到的文件名，比如 TEST。  3. 接着输入 :w TEST  (此处 TEST 是您所选择的文件名。)  4. 该命令会以 TEST 为文件名保存整个文件 (Vim 教程)。为了验证这一点，     请再次输入 :!dir 或 :!ls 查看您的目录列表内容。请注意：如果您退出 Vim 然后在以命令 vim TEST 再次启动 Vim，那么该文件内     容应该同您保存时的文件内容是完全一样的。  5. 现在您可以删除 TEST 文件了。在 MS-DOS 下，请输入：   :!del TEST                                 在 Unix 下，请输入：     :!rm TEST</code></pre><h2 id="第三节：一个具有选择性的保存命令"><a href="#第三节：一个具有选择性的保存命令" class="headerlink" title="第三节：一个具有选择性的保存命令"></a>第三节：一个具有选择性的保存命令</h2><pre><code>        ** 要保存文件的部分内容，请输入 v motion :w FILENAME **  1. 移动光标到本行。  2. 接着按 v 键，将光标移动至下面第五个条目上。您会注意到之间的文本被高亮了。  3. 然后按 : 字符。您将看到屏幕底部会出现 :&#39;&lt;,&#39;&gt; 。  4. 现在请输入 w TEST，其中 TEST 是一个未被使用的文件名。确认您看到了     :&#39;&lt;,&#39;&gt;w TEST 之后按 &lt;回车&gt; 键。  5. 这时 Vim 会把选中的行写入到以 TEST 命名的文件中去。使用 :!dir 或 :!ls     确认文件被正确保存。这次先别删除它！我们在下一讲中会用到它。提示：按 v 键使 Vim 进入可视模式进行选取。您可以四处移动光标使选取区域变大或      变小。接着您可以使用一个操作符对选中文本进行操作。例如，按 d 键会删除      选中的文本内容。</code></pre><h2 id="第四节：提取和合并文件"><a href="#第四节：提取和合并文件" class="headerlink" title="第四节：提取和合并文件"></a>第四节：提取和合并文件</h2><pre><code>       ** 要向当前文件中插入另外的文件的内容，请输入 :r FILENAME **  1. 请把光标移动到本行上面一行。特别提示：执行步骤2之后您将看到第五讲第三节的文字，请届时往下移动          以再次看到本讲内容。  2. 接着通过命令 :r TEST 将前面创建的名为 TEST 的文件提取进来。     您所提取进来的文件将从光标所在位置处开始置入。  3. 为了确认文件已经提取成功，移动光标回到原来的位置就可以注意有两份第     五讲第三节的内容，一份是原始内容，另外一份是来自文件的副本。提示：您还可以读取外部命令的输出。例如， :r !ls 可以读取 ls 命令的输出，并      把它放置在光标下面。</code></pre><h2 id="小结-4"><a href="#小结-4" class="headerlink" title="小结"></a>小结</h2><pre><code>  1. :!command 用于执行一个外部命令 command。     请看一些实际例子：     (MS-DOS)      (Unix)      :!dir           :!ls           -  用于显示当前目录的内容。      :!del FILENAME   :!rm FILENAME   -  用于删除名为 FILENAME 的文件。  2. :w FILENAME  可将当前 VIM 中正在编辑的文件保存到名为 FILENAME 的文     件中。  3. v motion :w FILENAME 可将当前编辑文件中可视模式下选中的内容保存到文件     FILENAME 中。  4. :r FILENAME 可提取磁盘文件 FILENAME 并将其插入到当前文件的光标位置     后面。  5. :r !dir 可以读取 dir 命令的输出并将其放置到当前文件的光标位置后面。</code></pre><h1 id="第六讲"><a href="#第六讲" class="headerlink" title="第六讲"></a>第六讲</h1><h2 id="第一节：打开类命令"><a href="#第一节：打开类命令" class="headerlink" title="第一节：打开类命令"></a>第一节：打开类命令</h2><pre><code>     ** 输入 o 将在光标的下方打开新的一行并进入插入模式。**  1. 请将光标移动到本节中下面标记有 ---&gt; 的那一行。  2. 接着输入小写的 o 在光标 *下方* 打开新的一行，这个命令会使您     进入插入模式。  3. 然后输入一些文字，之后按 &lt;ESC&gt; 键退出插入模式而进入正常模式。---&gt; After typing  o  the cursor is placed on the open line in Insert mode.  4. 为了在光标 *上方* 打开新的一行，只需要输入大写的 O 而不是小写的 o     就可以了。请在下行测试一下吧。---&gt; Open up a line above this by typing O while the cursor is on this line.</code></pre><h2 id="第二节：附加类命令"><a href="#第二节：附加类命令" class="headerlink" title="第二节：附加类命令"></a>第二节：附加类命令</h2><pre><code>             ** 输入 a 将可在光标之后插入文本。 **  1. 请在正常模式下将光标移动到本节中下面标记有 ---&gt; 的第一行的行首。  2. 接着输入 e 直到光标位于 li 的末尾。  3. 输入小写的 a 则可在光标之后插入文本了。  4. 将单词补充完整，就像下一行中的那样。之后按 &lt;ESC&gt; 键退出插入模式回到     正常模式。  5. 使用 e 移动光标到下一步不完整的单词，重复步骤3和步骤4。---&gt; This li will allow you to pract appendi text to a line.---&gt; This line will allow you to practice appending text to a line.提示：a、i 和 A 都会带您进入插入模式，惟一的区别在于字符插入的位置。</code></pre><h2 id="第三节：另外一个置换类命令的版本"><a href="#第三节：另外一个置换类命令的版本" class="headerlink" title="第三节：另外一个置换类命令的版本"></a>第三节：另外一个置换类命令的版本</h2><pre><code>              ** 输入大写的 R 可连续替换多个字符。**  1. 请将光标移动到本节中下面标记有 ---&gt; 的第一行。移动光标到第一个 xxx 的     起始位置。  2. 然后输入大写的 R 开始把第一行中的不同于第二行的剩余字符逐一输入，就     可以全部替换掉原有的字符而使得第一行完全雷同第二行了。  3. 接着按 &lt;ESC&gt; 键退出替换模式回到正常模式。您可以注意到尚未替换的文本     仍然保持原状。  4. 重复以上步骤，将剩余的 xxx 也替换掉。---&gt; Adding 123 to xxx gives you xxx.---&gt; Adding 123 to 456 gives you 579.提示：替换模式与插入模式相似，不过每个输入的字符都会删除一个已有的字符。</code></pre><h2 id="第四节：复制粘贴文本"><a href="#第四节：复制粘贴文本" class="headerlink" title="第四节：复制粘贴文本"></a>第四节：复制粘贴文本</h2><pre><code>         ** 使用操作符 y 复制文本，使用 p 粘贴文本 **  1. 定位到下面标记有 ---&gt; 的一行，将光标移动到 &quot;a)&quot; 之后。  2. 接着使用 v 进入可视模式，移动光标到 &quot;first&quot; 的前面。  3. 现在输入 y 以抽出(复制)高亮的文本。  4. 然后移动光标到下一行的末尾：j$  5. 接着输入 p 以放置(粘贴)复制了的文本。然后输入：a second &lt;ESC&gt;。  6. 使用可视模式选中 &quot; item.&quot;，用 y 复制，再用 j$ 将光标移动到下一行末尾，     用 p 将文本粘贴到那里。---&gt;  a) this is the first item.      b)  提示：您还可以把 y 当作操作符来使用；例如 yw 可以用来复制一个单词。</code></pre><h2 id="第五节：设置类命令的选项"><a href="#第五节：设置类命令的选项" class="headerlink" title="第五节：设置类命令的选项"></a>第五节：设置类命令的选项</h2><pre><code>          ** 设置可使查找或者替换可忽略大小写的选项 **  1. 要查找单词 ignore 可在正常模式下输入 /ignore &lt;回车&gt;。     要重复查找该词，可以重复按 n 键。  2. 然后设置 ic 选项(Ignore Case，忽略大小写)，请输入： :set ic  3. 现在可以通过键入 n 键再次查找单词 ignore。注意到 Ignore 和 IGNORE 现在     也被找到了。  4. 然后设置 hlsearch 和 incsearch 这两个选项，请输入： :set hls is  5. 现在可以再次输入查找命令，看看会有什么效果： /ignore &lt;回车&gt;  6. 要禁用忽略大小写，请输入： :set noic提示：要移除匹配项的高亮显示，请输入：  :nohlsearch提示：如果您想要仅在一次查找时忽略字母大小写，您可以使用 \c：      /ignore\c &lt;回车&gt;</code></pre><h2 id="小结-5"><a href="#小结-5" class="headerlink" title="小结"></a>小结</h2><pre><code>  1. 输入小写的 o 可以在光标下方打开新的一行并进入插入模式。     输入大写的 O 可以在光标上方打开新的一行。  2. 输入小写的 a 可以在光标所在位置之后插入文本。     输入大写的 A 可以在光标所在行的行末之后插入文本。  3. e 命令可以使光标移动到单词末尾。  4. 操作符 y 复制文本，p 粘贴先前复制的文本。  5. 输入大写的 R 将进入替换模式，直至按 &lt;ESC&gt; 键回到正常模式。  6. 输入 :set xxx 可以设置 xxx 选项。一些有用的选项如下：      &#39;ic&#39; &#39;ignorecase&#39;    查找时忽略字母大小写    &#39;is&#39; &#39;incsearch&#39;    查找短语时显示部分匹配    &#39;hls&#39; &#39;hlsearch&#39;    高亮显示所有的匹配短语     选项名可以用完整版本，也可以用缩略版本。  7. 在选项前加上 no 可以关闭选项：  :set noic</code></pre><h1 id="第七讲"><a href="#第七讲" class="headerlink" title="第七讲"></a>第七讲</h1><h2 id="第一节：获取帮助信息"><a href="#第一节：获取帮助信息" class="headerlink" title="第一节：获取帮助信息"></a>第一节：获取帮助信息</h2><pre><code>              ** 使用在线帮助系统 **  Vim 拥有一个细致全面的在线帮助系统。要启动该帮助系统，请选择如下三种方  法之一：    - 按下 &lt;HELP&gt; 键 (如果键盘上有的话)    - 按下 &lt;F1&gt; 键 (如果键盘上有的话)    - 输入    :help &lt;回车&gt;  请阅读帮助窗口中的文字以了解帮助是如何工作的。  输入 CTRL-W CTRL-W   可以使您在窗口之间跳转。  输入 :q &lt;回车&gt; 可以关闭帮助窗口。  提供一个正确的参数给&quot;:help&quot;命令，您可以找到关于该主题的帮助。请试验以  下参数(可别忘了按回车键哦)：    :help w    :help c_CTRL-D    :help insert-index    :help user-manual</code></pre><h2 id="第二节：创建启动脚本"><a href="#第二节：创建启动脚本" class="headerlink" title="第二节：创建启动脚本"></a>第二节：创建启动脚本</h2><pre><code>              ** 启用 Vim 的特性 **  Vim 的功能特性要比 Vi 多得多，但其中大部分都没有缺省启用。为了使用更多的  特性，您得创建一个 vimrc 文件。  1. 开始编辑 vimrc 文件，具体命令取决于您所使用的操作系统：        :edit ~/.vimrc        这是 Unix 系统所使用的命令        :edit $VIM/_vimrc    这是 MS-Windows 系统所使用的命令  2. 接着读取 vimrc 示例文件的内容：        :r $VIMRUNTIME/vimrc_example.vim  3. 保存文件，命令为：        :write  下次您启动 Vim 时，编辑器就会有了语法高亮的功能。  您可以把您喜欢的各种设置添加到这个 vimrc 文件中。  要了解更多信息请输入 :help vimrc-intro</code></pre><h2 id="第三节：补全功能"><a href="#第三节：补全功能" class="headerlink" title="第三节：补全功能"></a>第三节：补全功能</h2><pre><code>          ** 使用 CTRL-D 和 &lt;TAB&gt; 可以进行命令行补全 **  1. 请确保 Vim 不是在以兼容模式运行： :set nocp  2. 查看一下当前目录下已经存在哪些文件，输入： :!ls   或者  :!dir  3. 现在输入一个目录的起始部分，例如输入： :e  4. 接着按 CTRL-D 键，Vim 会显示以 e 开始的命令的列表。  5. 然后按 &lt;TAB&gt; 键，Vim 会补全命令为 :edit 。  6. 现在添加一个空格，以及一个已有文件的文件名的起始部分，例如： :edit FIL  7. 接着按 &lt;TAB&gt; 键，Vim 会补全文件名(如果它是惟一匹配的)。提示：补全对于许多命令都有效。您只需尝试按 CTRL-D 和 &lt;TAB&gt;。      它对于 :help 命令非常有用。</code></pre><h2 id="小结-6"><a href="#小结-6" class="headerlink" title="小结"></a>小结</h2><pre><code>  1. 输入 :help 或者按 &lt;F1&gt; 键或 &lt;Help&gt; 键可以打开帮助窗口。  2. 输入 :help cmd 可以找到关于 cmd 命令的帮助。  3. 输入 CTRL-W CTRL-W  可以使您在窗口之间跳转。  4. 输入 :q 以关闭帮助窗口  5. 您可以创建一个 vimrc 启动脚本文件用来保存您偏好的设置。  6. 当输入 : 命令时，按 CTRL-D 可以查看可能的补全结果。     按 &lt;TAB&gt; 可以使用一个补全。</code></pre><pre><code>  vim 教程到此就结束了。本教程只是为了简明地介绍一下 Vim 编辑器，但已足以让您  很容易使用这个编辑器了。毋庸质疑，vim还有很多很多的命令，本教程所介  绍的距离完整的差得很远。所以您要精通的话，还望继续努力哦。下一步您可以阅读  Vim 的用户手册，使用的命令是： :help user-manual  下面这本书值得推荐用于更进一步的阅读和学习：    Vim - Vi Improved - 作者：Steve Oualline    出版社：New Riders  这是第一本完全讲解 Vim 的书籍。它对于初学者特别有用。其中包含有大量实例  和图示。  欲知详情，请访问 http://iccf-holland.org/click5.html  以下这本书比较老了而且内容更多是关于 Vi 而非 Vim，但是也值得推荐：    Learning the Vi Editor - 作者：Linda Lamb    出版社：O&#39;Reilly &amp; Associates Inc.  这是一本不错的书，通过它您几乎能够了解到任何您想要使用 Vi 做的事情。  此书的第六个版本也包含了一些关于 Vim 的信息。  本教程是由来自 Calorado School of Mines 的 Michael C. Pierce 和  Robert K. Ware 所编写的，其中很多创意由来自 Colorado State University 的  Charles Smith 提供。编者的电子邮箱是：bware@mines.colorado.edu  本教程已由 Bram Moolenaar 专为 Vim 进行修订。  译制者附言：  ===========      简体中文教程翻译版之译制者为梁昌泰 &lt;beos@turbolinux.com.cn&gt;，还有      另外一个联系地址：linuxrat@gnuchina.org。      繁体中文教程是从简体中文教程翻译版使用 Debian GNU/Linux 中文项目小      组的于广辉先生编写的中文汉字转码器  autoconvert 转换而成的，并对转      换的结果做了一些细节的改动。  变更记录：  =========      2012年10月01日 赵涛 &lt;alick9188@gmail.com&gt;      将 vimtutor 中译版从 1.5 升级到 1.7。      2002年08月30日 梁昌泰 &lt;beos@turbolinux.com.cn&gt;      感谢 RMS@SMTH 的指正，将多处错误修正。      2002年04月22日 梁昌泰 &lt;linuxrat@gnuchina.org&gt;      感谢 xuandong@sh163.net 的指正，将两处错别字修正。      2002年03月18日 梁昌泰 &lt;linuxrat@gnuchina.org&gt;      根据Bram Moolenaar先生在2002年03月16日的来信要求，将vimtutor1.4中译      版升级到vimtutor1.5。      2001年11月15日 梁昌泰 &lt;linuxrat@gnuchina.org&gt;      将vimtutor1.4中译版提交给Bram Moolenaar和Sven Guckes。</code></pre>]]></content>
      
      
      <categories>
          
          <category> vim </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vim </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo+gitpages+ci 打造个人博客</title>
      <link href="/2019/02/05/others-createGitPagesByHexo/"/>
      <url>/2019/02/05/others-createGitPagesByHexo/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>说起自己写博客的历史也是有断断续续一年了，大概也是18年春节期间自己fork了他人的博客，使用gitPages部署，也是从那时开始学习git，博客说起来也算是自己成为一个稍微正式一点的coder的开端吧。至于自己为什么要放弃之前博客，要重新利用hexo打造个人博客，原因如下：  </p><ol><li>hexo配置简单，插件丰富  </li><li>3-hexo这个主题比较符合自己对于博客条理性的要求，相比于之前的博客更加精炼，易整理，易阅读    </li><li>ci的集成也让hexo更加关心写作本身<br>在阅读本文之前,默认读者拥有域名解析经验与gitPages了解,如果存在疑问,请参考我fork的上一个Blog原作者的<a href="https://www.jianshu.com/p/e68fba58f75c" target="_blank" rel="noopener">详细搭建流程</a></li></ol><h1 id="基础环境"><a href="#基础环境" class="headerlink" title="基础环境"></a>基础环境</h1><h2 id="hexo安装"><a href="#hexo安装" class="headerlink" title="hexo安装"></a>hexo安装</h2><p>基础环境:Node,Git<br>教程：<em><a href="https://hexo.io/zh-cn/docs/index.html" target="_blank" rel="noopener">hexo官网安装教程</a></em></p><h2 id="3-hexo主题"><a href="#3-hexo主题" class="headerlink" title="3-hexo主题"></a>3-hexo主题</h2><p><a href="https://github.com/yelog/hexo-theme-3-hexo" target="_blank" rel="noopener">仓库地址</a></p><h2 id="Travis-CI配置"><a href="#Travis-CI配置" class="headerlink" title="Travis CI配置"></a>Travis CI配置</h2><p><em>请先按以下操作配置,详细配置在余下篇幅介绍</em>  </p><ol><li>将Travis CI授予GitHub权限   </li><li>需要被CI管理的仓库在根目录生成 .travis.yml文件,并进行push到github  </li><li>Travis CI开启对相应仓库的监测  </li><li>push代码到ci配置的监测分支,看log记录是否触发成功</li></ol><pre><code class="yaml">ci触发分支配置branches:   only:  - source //触发ci的条件分支</code></pre><p><strong>补充</strong>: 为防止有些同学不了解CI概念,我简单介绍下CI,CI意味着持续集成,可以以我公司配置的CI为例,我们都知道代码上线需要保证质量,我们可以在CI中配置每次进行Git Push时,复杂CI的机器就会进行代码的编译,历史自测的检查,当我们合并Master分支时,我们的对外的Api可能发生变化,也可以依靠CI进行自动API包的发布,这些都是CI要做的事情,在这篇文章涉及的代码库存在两个分支,source分支保留我们博客的源码,包含我们文章的Markdown等文件,Master分支是Hexo生成的静态网页文件,我们依靠Travis CI做到的就是,我们向source分支提交代码,Travis CI进行拉取环境,编译,最后hexo deploy到Master分支,让我们的网页进行变化</p><h1 id="CI"><a href="#CI" class="headerlink" title="CI"></a>CI</h1><h2 id="travis-yml文件加入对环境运行环境支持"><a href="#travis-yml文件加入对环境运行环境支持" class="headerlink" title=".travis.yml文件加入对环境运行环境支持"></a>.travis.yml文件加入对环境运行环境支持</h2><pre><code class="yaml">language: node_js //node环境node_js:- 10.15.1 //node版本branches:   only:  - source //触发ci的条件分支before_install: - npm install -g hexo-cli //hexo环境- npm install --save hexo-deployer-git //hexo deploy插件install:- npm install //安装package.json文件中配置的hexo插件</code></pre><p>当source分支发生改变,Travis CI监测到change后进行ci,首先安装node环境,之后安装hexo环境,安装deploy插件,安装额外hexo插件</p><h2 id="config-yml文件加入仓库配置"><a href="#config-yml文件加入仓库配置" class="headerlink" title="_config.yml文件加入仓库配置"></a>_config.yml文件加入仓库配置</h2><pre><code class="yaml">deploy:  type: git  repo: git@github.com:EvanLjp/evanljp.github.io.git  branch: master</code></pre><p>一些细心地同学可能已经发现了一些问题,我们是在运行ci的机器进行deploy,但是我们机器上并没有配置git秘钥,怎么能进行push操作呢,这就要说到Github OAuth,支持一种带有token的秘钥进行免git秘钥push</p><h2 id="创建Github-OAuthToken"><a href="#创建Github-OAuthToken" class="headerlink" title="创建Github OAuthToken"></a>创建Github OAuthToken</h2><ol><li>打开 <a href="https://github.com/settings/tokens" target="_blank" rel="noopener">Personal Access Tokens</a></li><li>create new token</li><li>请注意,至少给这个token repo的权限,否则无法push</li><li>进行token可用性测试<ul><li>按https://<token>@github.com/owner/repo.git格式拼接某个仓库的url(<token>表示生成token),例如我的blog仓库地址:<a href="https://1f0f0XXX@github.com/Evanljp/evanljp.github.io.git(XXX表示省略,实际token很长)" target="_blank" rel="noopener">https://1f0f0XXX@github.com/Evanljp/evanljp.github.io.git(XXX表示省略,实际token很长)</a></token></token></li><li>进行git clone ,能clone说明url拼接合理</li><li>进行git push,如成功,说明这个token可用,如发现403,请检查repo权限是否赋予<br>我们已经看到这个token权限的强大之处,我的仓库source分支包含了Blog的所有源码,我不可能把这么大权限的token进行暴露,所以必须进行加密,幸好travis已经提供解决方案,接下来我们看一下如何token加密</li></ul></li></ol><h2 id="Token加密"><a href="#Token加密" class="headerlink" title="Token加密"></a>Token加密</h2><ol><li>首先安装 travis 命令行工具</li></ol><pre><code class="bash">gem install travistravis login</code></pre><ol start="2"><li>.travis.yml通过命令加入加密token :<br><strong>travis encrypt ‘GH_TOKEN=TOKEN’ –add</strong>,TOKEN表示之前明文token,你会发现.travis.yml文件已经加入了如下内容:</li></ol><pre><code class="yaml">env:  global:    secure: fuY23T6wEu...</code></pre><h2 id="Token解密"><a href="#Token解密" class="headerlink" title="Token解密"></a>Token解密</h2><p>在.travis.yml文件加入如下内容,以动态解密发布</p><pre><code class="yaml">after_success:    - git config --global user.name &quot;evanljp&quot;    - git config --global user.email &quot;evanljp@outlook.com&quot;    - sed -i&#39;&#39; &quot;s~git@github.com:EvanLjp/evanljp.github.io.git~https://${GH_TOKEN}:x-oauth-basic@github.com/EvanLjp/evanljp.github.io.git~&quot; _config.yml    - hexo deploy --silent</code></pre><h2 id="发布"><a href="#发布" class="headerlink" title="发布"></a>发布</h2><p>上一步的配置中实际已经加入了hexo deploy –silent发布配置,请动手尝试,观看CI线上Log,如果发现Push成功,那么恭喜你,你也拥有了一个可以自动Ci的blog,让你可以更加关注写作</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://github.com/EvanLjp/evanljp.github.io/tree/source" target="_blank" rel="noopener">个人blog配置</a><br><a href="https://sazzer.github.io/blog/2015/05/04/Deploying-Hexo-to-Github-Pages-with-Travis/" target="_blank" rel="noopener">Deploying Hexo to Github Pages with Travis</a></p>]]></content>
      
      
      <categories>
          
          <category> 其他 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
